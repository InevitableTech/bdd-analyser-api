name: Test & Deploy

on: [push]

# permissions:
#   contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        tools: composer

    - name: Prepull docker images
      run: |
        docker-compose pull database &

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Setup app
      run: |
        cp .env.example .env

        echo DB_HOST=database >> .env
        echo DB_DATABASE=bdd_analyser_console >> .env
        echo DB_USERNAME=api >> .env
        echo DB_PASSWORD=secret >> .env
        echo AUTH_TOKEN=averysecrettokenforapiauthorization== >> .env

        make artisan a=key:generate
        make install-dirs
        make run
        docker ps
        docker-compose logs api
        docker-compose logs database

        sleep 20

        make rebuild-db

    - name: Run test suite
      run: make tests

    - name: create zip and archive
      run: |
        zip release.zip ./* -r

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: bdd-analyser-api-app
        path: release.zip

  upload-release:
    runs-on: ubuntu-latest
    environment: production
    needs: [test]
    # if: github.ref == 'refs/heads/main'
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: bdd-analyser-api-app

    - name: Display structure of downloaded files
      run: ls -R

    - name: Move artifact to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        port: ${{ secrets.PORT }}
        source: "release.zip"
        target: "/var/tmp/"

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: [upload-release]
    steps:
    - name: Deploy app to server
      uses: appleboy/ssh-action@v0.1.8
      env:
        ENVIRONMENT: "production"
        APP_SECRETS: ${{ secrets.APP_SECRETS }}
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        port: ${{ secrets.PORT }}
        envs: ENVIRONMENT,APP_SECRET
        script: |
          export DB_HOST=$(echo $APP_SECRETS | jq -r .db_host)
          export DB_USERNAME=$(echo $APP_SECRETS | jq -r .db_username)
          export DB_PASSWORD=$(echo $APP_SECRETS | jq -r .db_username)
          export AUTH_TOKEN=$(echo $APP_SECRETS | jq -r .db_username)

          unzip /var/tmp/release.zip -d /var/sites/bdd-analyser-api/release
          chmod a+x /var/sites/bdd-analyser-api/release/deploy/deploy.sh
          cd /var/sites/bdd-analyser-api/release/ && ./deploy/deploy.sh "/var/sites/bdd-analyser-api/"
  # on-failure:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.workflow_run.conclusion == 'failure' }}
  #   steps:
  #     - run: echo 'The triggering workflow failed'